import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32
from std_msgs.msg import Float32MultiArray

class VelocityCalculator(Node):
    def _init_(self):
        super()._init_('velocity_calculator')

        # Robot-specific constants
        self.wheel_radius_m = 0.0325  # Wheel radius in meters
        self.track_width_m = 0.185    # Distance between wheels (meters)

        # Subscribers for motor RPMs
        self.right_rpm_sub = self.create_subscription(
            Int32,
            'right_motor_rpm',
            self.update_right_rpm,
            10
        )
        self.left_rpm_sub = self.create_subscription(
            Int32,
            'left_motor_rpm',
            self.update_left_rpm,
            10
        )

        # Publisher for robot velocities
        self.velocity_pub = self.create_publisher(
            Float32MultiArray,
            'robot_velocity',
            10
        )

        # Storage for motor RPMs
        self.right_motor_rpm = 0
        self.left_motor_rpm = 0

    def update_right_rpm(self, msg):
        self.right_motor_rpm = msg.data
        self.compute_velocities()

    def update_left_rpm(self, msg):
        self.left_motor_rpm = msg.data
        self.compute_velocities()

    def compute_velocities(self):
        # Convert motor RPM to angular velocity in radians/second
        omega_right = (self.right_motor_rpm * 2 * 3.14159) / 60
        omega_left = (self.left_motor_rpm * 2 * 3.14159) / 60

        # Calculate linear velocities of the wheels
        velocity_right = omega_right * self.wheel_radius_m
        velocity_left = omega_left * self.wheel_radius_m

        # Compute robot's linear and angular velocity
        linear_velocity = (velocity_right + velocity_left) / 2
        angular_velocity = (velocity_right - velocity_left) / self.track_width_m

        # Publish velocities as a Float32MultiArray
        velocity_message = Float32MultiArray()
        velocity_message.data = [linear_velocity, angular_velocity]
        self.velocity_pub.publish(velocity_message)

        # Log the published values for debugging
        self.get_logger().info(f'Linear Velocity: {linear_velocity:.2f} m/s, Angular Velocity: {angular_velocity:.2f} rad/s')

def main(args=None):
    rclpy.init(args=args)

    # Instantiate the VelocityCalculator node
    velocity_calculator = VelocityCalculator()

    try:
        rclpy.spin(velocity_calculator)
    except KeyboardInterrupt:
        pass
    finally:
        velocity_calculator.destroy_node()
        rclpy.shutdown()

if _name_ == '_main_':
    main()
