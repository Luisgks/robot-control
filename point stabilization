import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

class PointController(Node):
    def __init__(self):
        super().__init__('point_controller_node')
        
        # Parámetros del robot
        self.wheel_radius = 0.032
        self.axle_length = 0.225
        self.max_rpm = 135

        # Configuración de control
        self.target_distance = 0.2  # Distancia objetivo en metros
        self.kp = 0.4  # Ganancia proporcional

        # Almacenamiento de estados
        self.current_distance = 0.0

        # Publicadores
        self.pub_rpm_left = self.create_publisher(Int32, 'desired_rpm_left', 10)
        self.pub_rpm_right = self.create_publisher(Int32, 'desired_rpm_right', 10)

    def update_distance(self, distance_left, distance_right):
        self.current_distance = (distance_left + distance_right) / 2

    def control(self):
        error = self.target_distance - self.current_distance
        if abs(error) < 0.01:
            self.get_logger().info("Target reached. Stopping motors.")
            self.publish_rpm(0, 0)
            return

        vx = self.kp * error
        rpm = min(int(vx * 60 / (3.14159 * self.wheel_radius)), self.max_rpm)
        self.publish_rpm(rpm, rpm)

    def publish_rpm(self, rpm_left, rpm_right):
        self.pub_rpm_left.publish(Int32(data=rpm_left))
        self.pub_rpm_right.publish(Int32(data=rpm_right))

def main(args=None):
    rclpy.init(args=args)
    node = PointController()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
