import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

# Define robot-specific parameters
WHEEL_RADIUS = 0.0325  # Wheel radius in meters
BASE_WIDTH = 0.185  # Distance between the wheels in meters

class MotorRPMPublisher(Node):
    def _init_(self):
        super()._init_('motor_rpm_publisher')
        self.left_motor_pub = self.create_publisher(Int32, 'left_motor_rpm', 10)
        self.right_motor_pub = self.create_publisher(Int32, 'right_motor_rpm', 10)
        
        # Timer to send periodic updates (every 100 ms)
        self.publish_timer = self.create_timer(0.1, self.publish_rpm_values)

        # Initial velocities for the robot (m/s and rad/s)
        self.linear_velocity = 0.03  # Forward speed in m/s
        self.angular_velocity = 0.0  # Rotational speed in rad/s

    def compute_motor_rpms(self, linear_velocity, angular_velocity, wheel_radius, base_width):
        # Calculate motor RPMs using differential drive kinematics
        left_rpm = ((linear_velocity - angular_velocity * base_width / 2) / (3.14159 * wheel_radius)) * 60
        right_rpm = ((linear_velocity + angular_velocity * base_width / 2) / (3.14159 * wheel_radius)) * 60
        return left_rpm, right_rpm

    def publish_rpm_values(self):
        # Compute RPM values for both motors
        left_rpm, right_rpm = self.compute_motor_rpms(
            self.linear_velocity,
            self.angular_velocity,
            WHEEL_RADIUS,
            BASE_WIDTH
        )

        # Create and send Int32 messages for motor RPMs
        left_rpm_msg = Int32()
        right_rpm_msg = Int32()
        left_rpm_msg.data = int(left_rpm)
        right_rpm_msg.data = int(right_rpm)

        self.left_motor_pub.publish(left_rpm_msg)
        self.right_motor_pub.publish(right_rpm_msg)

        self.get_logger().info(f"RPM values published: Left = {left_rpm_msg.data}, Right = {right_rpm_msg.data}")
        self.destroy_node()  # Stops the node after publishing

def main(args=None):
    rclpy.init(args=args)

    # Instantiate the MotorRPMPublisher node
    motor_rpm_publisher = MotorRPMPublisher()

    try:
        rclpy.spin(motor_rpm_publisher)
    except KeyboardInterrupt:
        pass

    # Properly clean up resources
    motor_rpm_publisher.destroy_node()
    rclpy.shutdown()

if _name_ == '_main_':
    main()
