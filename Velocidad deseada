import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

class DesiredSpeedControl(Node):
    def __init__(self):
        super().__init__('desired_speed_control_node')
        
        # Par치metros del robot
        self.wheel_radius = 0.032  # Radio de las ruedas
        self.axle_length = 0.225  # Separaci칩n entre ruedas

        # Velocidades deseadas
        self.desired_linear_velocity = 0.07  # Velocidad lineal en m/s
        self.desired_angular_velocity = 0.0  # Velocidad angular en rad/s

        # Publicadores para las RPM deseadas
        self.pub_rpm_left = self.create_publisher(Int32, 'desired_rpm_left', 10)
        self.pub_rpm_right = self.create_publisher(Int32, 'desired_rpm_right', 10)

        # Timer para publicar peri칩dicamente
        self.timer = self.create_timer(0.1, self.publish_rpm)

    def calculate_rpm(self):
        v = self.desired_linear_velocity
        w = self.desired_angular_velocity
        r = self.wheel_radius
        l = self.axle_length

        # C치lculo de RPM de las ruedas
        rpm_left = ((v - (w * l / 2)) / (3.14159 * r)) * 60
        rpm_right = ((v + (w * l / 2)) / (3.14159 * r)) * 60
        return int(rpm_left), int(rpm_right)

    def publish_rpm(self):
        rpm_left, rpm_right = self.calculate_rpm()
        self.pub_rpm_left.publish(Int32(data=rpm_left))
        self.pub_rpm_right.publish(Int32(data=rpm_right))
        self.get_logger().info(f'Desired RPM - Left: {rpm_left}, Right: {rpm_right}')

def main(args=None):
    rclpy.init(args=args)
    node = DesiredSpeedControl()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
